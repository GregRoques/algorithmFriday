# ====================PROBLEM 1======================

# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

# total_sum = 0

# for i in range(1000):
#     if(i % 5 == 0 or i % 3 == 0):
#         total_sum = total_sum + i # total_sum +=1
# print total_sum

# ====================PROBLEM 2======================

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# fib1 = 1
# fib2 = 2
# sumTotal = 0
# while (sumTotal < 4000000):
#     newFib = fib1 + fib2 
#     fib1 = fib2
#     fib2 = newFib
#     if (fib1 % 2 == 0):
#         sumTotal += fib1
# print sumTotal

# ====================PROBLEM 3======================

# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?

#Greg
# number = 600851475143

list =[]
number = 600851475143
for i in range(number):
    list.append(i)

for j in list:
    if number % j == 0:
        #remove all other numbers in list divisible by j
        for k in range(j+1, number):
            if k % j == 0:
                list.remove(k)
print list            

#Solution



# known_prime = [2,3]
# def is_prime(n):
#     total_known_primes = len(known_prime)
#     for i in range(0, total_known_primes):
#         if(n % known_prime[i] == 0):
#             return False
#     else: 



#         known_prime.append(n)
#     if(i == total_known_primes):
#         return True
# print is_prime(24957243589743298457)






